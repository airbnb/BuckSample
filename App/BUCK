load("//Config:configs.bzl", "binary_configs", "library_configs", "watch_binary_configs", "pretty", "info_plist_substitutions")
load("//Config:buck_rule_macros.bzl", "apple_lib", "apple_test_lib", "apple_test_all")

apple_asset_catalog(
    name = "ExampleAppAssets",
    visibility = ["//App:"],
    app_icon = "AppIcon",
    dirs = ["Assets.xcassets"],
)

apple_resource(
    name = "ExampleAppResource",
    visibility = ["//App:"],
    files = glob(["Resources/**/*.storyboard"]),
)

app_tests = [
    "//App/Tests:Tests",
]

first_party_library_dependencies = [
    "//Libraries/Swift2:Swift2",
    "//Libraries/Swift3:Swift3",
    "//Libraries/Objc1:Objc1",
    "//Libraries/ObjcAndSwift:ObjcAndSwift",
    "//Libraries/SwiftAndObjc:SwiftAndObjc",
    "//Libraries/SwiftReliesOnCXX:SwiftReliesOnCXX",
    "//Libraries/SwiftWithAssets:SwiftWithAssets",
    "//Libraries/SwiftWithMLModel:SwiftWithMLModel",
]

apple_library(
    name = "ExampleApp",
    visibility = [
        "//App:",
        "//App/...",
    ],
    configs = library_configs(),
    swift_version = "4.0",
    srcs = [
        "ViewController.swift",
        "AppDelegate.swift",
    ],
    tests = app_tests,
    deps = [
        "//Pods:CryptoSwift",
        ":ExampleAppResource",
        ":ExampleAppAssets",
    ] + first_party_library_dependencies,
)

apple_binary(
    name = "ExampleAppBinary",
    visibility = [
        "//App:",
        "//App/...",
    ],
    configs = binary_configs("ExampleApp"),
    swift_version = "4.0",
    srcs = [
        "BuckSupportFiles/Dummy.swift",
    ],
    deps = [
        ":ExampleApp",
    ],
)


# This test bundles all unit test libraries into a single test target.
# Test targets can be slow to create in CI; creating only one can save significant time.
apple_test_all(
    name = "ExampleAppCITests",
    info_plist = "Info.plist",
    libraries = first_party_library_dependencies,
    additional_tests = app_tests,
)

xcode_workspace_config(
    name = "workspace",
    workspace_name = "ExampleApp",
    src_target = ":ExampleAppBundle",
    additional_scheme_actions = {
        "Build": {
            "PRE_SCHEME_ACTIONS": ["echo 'Started'"],
            "POST_SCHEME_ACTIONS": ["echo 'Finished'"],
        },
    },
    action_config_names = {"profile": "Profile"},
)

apple_bundle(
    name = "ExampleAppBundle",
    visibility = [
        "//App:",
        "//App/UITests:",
    ],
    extension = "app",
    binary = ":ExampleAppBinary",
    product_name = "ExampleApp",
    info_plist = "Info.plist",
    info_plist_substitutions = info_plist_substitutions("ExampleApp"),
    deps = [
        # For "#watch", https://buckbuild.com/rule/apple_bundle.html#deps
        ":DemoWatchApp#watch",
    ]
)

apple_package(
    name = "ExampleAppPackage",
    bundle = ":ExampleAppBundle",
)

### Watch App Begin ###
# Define the watch app in the same BUCK file as the binary into which the watch app will be installed.
# Xcode is finicky when it comes to how it embeds watch apps into main app bundles.  Watch apps are 
# built into the `watchos` build directory, but Xcode only knows to look for the watch app binary in the `watchos`
# directory if the watch target is defined in the same `pbxproj` as the main app binary. If the key/value pair 
# on the watch target `SDKROOT = watchos;` is not in the same `pbxproj` as the target that defines the main app
# binary, the Copy Files phase to embed the watch app and extension will search the `iphoneos` directory, 
# and fail the build on generated Xcode projects.

apple_binary(
    name = "DemoWatchAppExtensionBinary",
    srcs = glob([
        "WatchExtension/**/*.m",
    ]),
    compiler_flags = ["-fobjc-arc"],
    configs = watch_binary_configs(),
    frameworks = [
        "$SDKROOT/System/Library/Frameworks/CoreGraphics.framework",
        "$SDKROOT/System/Library/Frameworks/Foundation.framework",
        "$SDKROOT/System/Library/Frameworks/UIKit.framework",
        "$SDKROOT/System/Library/Frameworks/WatchConnectivity.framework",
        "$SDKROOT/System/Library/Frameworks/WatchKit.framework",
    ],
    headers = glob([
        "WatchExtension/**/*.h",
    ]),
)

apple_bundle(
    name = "DemoWatchAppExtension",
    binary = ":DemoWatchAppExtensionBinary",
    extension = "appex",
    info_plist = "WatchExtension/Resources/Info.plist",
    xcode_product_type = "com.apple.product-type.watchkit2-extension",
)

apple_bundle(
    name = "DemoWatchApp",
    binary = ":DemoWatchAppBinary",
    visibility = [
        "//App:",
    ],
    extension = "app",
    info_plist = "WatchApplication/Info.plist",
    xcode_product_type = "com.apple.product-type.application.watchapp2",
    deps = [
        ":DemoWatchAppExtension",
        ":DemoWatchAppResources",
    ],
)

apple_binary(
    name = "DemoWatchAppBinary",
    configs = watch_binary_configs(),
)

apple_resource(
    name = "DemoWatchAppResources",
    dirs = [],
    files = ["WatchApplication/Interface.storyboard"],
)
### Watch App End ###
